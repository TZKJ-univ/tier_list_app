<% if @can_add_item %>
  <%= form_with(model: [@tierlist, Tierlistitem.new], local: true) do |form| %>
    <% if form.object.errors.any? %>
      <div id="error_explanation">
        <div class="alert alert-danger">
          <ul>
            <% form.object.errors.full_messages.each do |msg| %>
              <li><%= msg %></li>
            <% end %>
          </ul>
        </div>
      </div>
    <% end %>

    <div class="field">
      <%= form.label "追加アイテム" %>
      <%= form.text_field :listitem, id: "listitem_field" %>
    </div>
    <div class="field">
      <%= form.label "TIERを選択" %>
      <%= form.select :rank, options_for_select([['S', 1], ['A', 2], ['B', 3], ['C', 4], ['D', 5], ['E', 6]]) %>
    </div>
    <div class="field">
      <span class="image">
        <%= form.file_field :image %>
      </span>
    </div>
    <div class="actions">
      <%= form.submit "追加", id: "submit_button"%>
    </div>
    <div>
      <%= link_to 'ティアリスト設定', edit_tierlist_path(@tierlist), class: 'btn btn-info' %>
    </div>
  <% end %>
<% end %>

<div class="ad-container">
  <!-- admax -->
  <script src="https://adm.shinobi.jp/s/00ef48a69f22cb03b5897c0e01867e50"></script>
  <!-- admax -->
</div>

<div class="tierlist-container">
  <div class="tierlist-content">
    <table class="tierlist-table">
      <tbody>
        <% @tierlistitems&.group_by(&:rank)&.each do |rank, items| %>
          <tr class="rank-<%= rank %>">
            <td>
              <strong>
                <% case rank %>
                <% when 1 %>
                  S
                <% when 2 %>
                  A
                <% when 3 %>
                  B
                <% when 4 %>
                  C
                <% when 5 %>
                  D
                <% when 6 %>
                  E
                <% else %>
                  <%= rank %>
                <% end %>
              </strong>
            </td>
            <td>
              <ul class="tierlist-items-inline" id="tierlist-rank-<%= rank %>">
                <% items.sort_by(&:position).each do |item| %>
                <li id="item-<%= item.id %>" draggable="true">
                    <div class="tierlist-item">
                      <div class="tierlist-item-name">
                        <%= item.listitem %>
                      </div>
                      <div class="tierlist-item-img">
                        <%= image_tag item.image.variant(resize: "100x100") if item.image.attached? %>
                      </div>
                    </div>
                        <% if @can_vote %>
                          <div class="vote-buttons">
                            <div class="buttons-container">
                                <% if @can_add_item %>
                                  <%= link_to "削除", tierlist_tierlistitem_path(@tierlist, item), data: { "turbo-method": :delete, turbo_confirm: "削除しますか?" }, class: 'delete-button' %>
                                <% end %>
                              </div>
                            <%= button_to "up", tierlist_tierlistitem_votes_path(@tierlist, item, vote_type: 'up'), method: :post, class: 'vote-button upvote' %>
                            <%= button_to "stay", tierlist_tierlistitem_votes_path(@tierlist, item, vote_type: 'stay'), method: :post, class: 'vote-button stay' %>
                            <%= button_to "down", tierlist_tierlistitem_votes_path(@tierlist, item, vote_type: 'down'), method: :post, class: 'vote-button downvote' %>
                          </div>
                        <% end %>
                  </li>
                <% end %>
              </ul>
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
  <div class="comments-section">
    <h2>コメント</h2>
    <div id="comments">
      <%= form_with(model: [@tierlist, Comment.new], local: true) do |form| %>
        <div class="field">
          <%= form.label :content, "コメントを追加" %>
          <%= form.text_area :content %>
        </div>
        <div class="actions">
          <%= form.submit "送信" %>
        </div>
      <% end %>

      <ul>
        <% @tierlist.comments.each do |comment| %>
          <li>
            <strong><%= comment.user ? comment.user.name : "匿名" %></strong>
            <div class="comment-content">
              <p><%= comment.content %></p>
            </div>
            <% if comment.user == current_user && logged_in? %>
              <%= link_to "削除", tierlist_tierlistitem_path(@tierlist, comment), data: { "turbo-method": :delete, turbo_confirm: "削除しますか?" }, class: 'delete-button' %>
            <% end %>
          </li>
        <% end %>
      </ul>
    </div>
  </div>
</div>

<script>
  function adjustFontSize(element) {
    let fontSize = 16; // 初期フォントサイズ
    const divWidth = element.clientWidth;
    
    while (element.scrollWidth > divWidth && fontSize > 5) { // テキストがはみ出しているかチェック
      fontSize--;
      element.style.fontSize = fontSize + 'px';
      element.style.boxSizing = 'border-box'; // ボックスサイズを調整
      element.style.padding = '0'; // パディングが邪魔しないようにする
    }
  }

  document.addEventListener("turbo:load", function() {
    document.querySelectorAll('.tierlist-item-name').forEach((item) => {
      adjustFontSize(item); // テキストがdivに収まるようにフォントサイズを調整
    });
  });

  document.addEventListener("turbo:load", function() {
  const listitemField = document.getElementById("listitem_field");
  const submitButton = document.getElementById("submit_button");

  function toggleSubmitButton() {
    submitButton.disabled = !listitemField.value.trim();
  }

  listitemField.addEventListener("input", toggleSubmitButton);
  toggleSubmitButton(); // 初期ロード時にボタンの状態を設定

  const dragstartHandler = (event) => {
    event.dataTransfer.setData('text/plain', event.target.id);
    event.dropEffect = 'move';
  };

  const dragoverHandler = (event) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
  };

  const dropHandler = (event) => {
    event.preventDefault();
    const id = event.dataTransfer.getData('text');
    const draggableElement = document.getElementById(id);
    const dropzone = event.target.closest('ul.tierlist-items-inline');

    if (dropzone) {
      // ドロップ先が空のティアでもアイテムを追加
      dropzone.appendChild(draggableElement);
    }
  };

  // ドラッグ可能なアイテムにイベントリスナーを追加
  document.querySelectorAll('[draggable="true"]').forEach((item) => {
    item.addEventListener('dragstart', dragstartHandler);
  });

  // ドロップゾーンにイベントリスナーを追加
  document.querySelectorAll('.tierlist-items-inline').forEach((zone) => {
    zone.addEventListener('dragover', dragoverHandler);
    zone.addEventListener('drop', dropHandler);
  });
});
</script>
